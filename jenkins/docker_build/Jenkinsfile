pipeline{
    agent any
    tools{
        jdk 'jdk'
        maven 'maven'
    }
    environment {
        SCANNER_HOME=tool 'sonar-scanner'
    } 
    stages{
        stage("Compile"){
            steps{
                sh "mvn clean compile"
           }
        }
        stage("Test Cases"){
            steps{
                sh "mvn test"
           }
        }
        stage("Sonarqube Analysis "){
            steps{
                withSonarQubeEnv('sonarqube-server') {
                    sh ''' $SCANNER_HOME/bin/sonarqube-scanner -Dsonar.projectName=project1 \
                    -Dsonar.java.binaries=. \
                    -Dsonar.projectKey=project1 '''
    
                }
            }
        }
        stage("OWASP Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./ --format HTML ', odcInstallation: 'DP-check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
         stage("Build"){
            steps{
                sh " mvn clean install"
            }
        }
        stage('image_build'){
           steps{
                sh '''
                    echo "buildinng image"
                    docker image build -t image2 ${WORKSPACE}/docker
                    '''
           }
        }
        stage('image_tagging'){
            steps{
                sh '''
                    echo "taggig image"
                    docker image tag image2:latest ranjana000/image2:latest
                    '''
            }
        }
        stage('image_push'){
            steps{
                sh '''
                    docker login -u ranjana000 -p shrinidhi@1
                    docker image push ranjana000/image2:latest
                    '''
            }
        }
        stage('deploy'){
            steps{
                sh '''
                    echo "creating container..."
                    docker container run -d --name container2 ranjana000/image2:latest bash
                    '''
            }
        }
    }
}
